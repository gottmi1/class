

1. 마크업 스타일 -> 차용할 포인트가 있는지
2. css 스타일 : 선택자를 어떻게 썼는지
3. script -> -3,-4파일 비교

지역변수 : 함수 안에 변수를 주는 것
함수 밖으로 나올 수 없음

전역변수 : 함수,객체,배열 등 함수 바깥에 있는 선언형식 : 어디서든 접근이 가능
단점 : 메모리를 많이 먹음(RAM부하의 원인)

★ 다른 사람 거 까봤는데 변수명에 is가 들어가있으면 리턴값이 불린타입일 확률이 높음


심심해 보일 때 : 무언가 요소를 덕지덕지 바를 게 아니라 
가장 중요한 요소의 디테일을 구상하는 것이 맞음.
필요하지 않은 부분은 과감하게 제거


1. 마크업
2. 스크립트 동작하는 것 콘솔 찍으면서 진행
3. css기본작업
4. 미디어 쿼리


템플릿 문자열
문자열(String)을 쓰는 세가지 방법

시작과 끝이 맞아야 함
'' 홑따옴표
"" 쌍따옴표
`` 백틱 = 템플릿 문자열

문자열 안에서 변수나 기타등등을 불러올 수 있다.
-> 사칙연산을 안 써도 된다.
법칙 : ' ${변수 기타등등} 


		const str = 'hello';
		const strD = "bye";
		//템플릿 문자열 = ``(백틱)
		const backT = `see you again`;

		const insa = str + strD + " 나는 구줖뇨라고해";
		//문자열을 + 로 이으면 띄어쓰기가 불가능함

		const temp = `${str}  잇츠빈어로호옹데이히 ${strD}`;
		//이렇게 사용하면 띄어쓰기가 자동으로 들어감

		// document.write(insa);
		document.write(temp);

결과 : hello 잇츠빈어로호옹데이히 bye 가 출력됨
const 뭐시기 = str + " 씨 반갑습니다" 이렇게 안쓰고
const 뭐시기 = `${str}씨 반갑습니다` 이렇게 쓰는게 템플릿


변수 안에 무언가를 하기 시작하는 순간부터 숫자를 사용


몰루.html

DOM객체이기 떄문에 -> 객체의 어떤 키값을 찾는행위(디버깅)

키 값을 -> 어떤 변수에다 담았음(문자열템플릿 재미로 써봄)
-> 문서는 콘솔이든 추출한 값을 출력한 행위


결국 백틱(템플릿 문자열)값은  ${}을 이용해서 다른 요소를 문자열과 함께 변수에 담을 수 있다는 것만 기억하면 됨.


css활용 -> 직접적으로 명령, 제어

오늘 한 건 알고리즘을 알고쓰는게 아니고 알고리즘을 추적할 수 있는 것
☆값을 찾아내서 바꿔버리는 것을 하고 있음.

1. 객체에 접근해서 값을 얻는것은 굉장히 쓸모가 많다.
-- 객체를 더 알 필요가 있다

2. 알고리즘 -> 어렵긴 하지만, 동작할 수 있다는 기대감 : 프론트개발의 재미
보이는 수단 body에 새겨진 어떤 요소들을 장난감으로 사용하는 것

컴퓨터에게 알아듣게 설명할 수 있으면 된다.






array_method.html-------------------------------

프론트 개발 배열의 '원소'를 미리 지정해주는 경우는 생각보다 별로 없다
대신 배열에다 원소를 추가하는 방법을 많이 씀.

배열 선언할 때 타입만 선언해주는 경향(코딩패턴)이 있다.

슬라이더, 게시글, 메뉴, 기타등등 순서에 관련된 것들은 배열이 아주 쓸만함
배열을 다루는 법을 알게되면 여러가지 변형하는데 큰 도움이 된다.

선언따로 원소추가 따로

☆ ★ 배열이 원소는 미리정해주지 않아도 알고리즘에 따라 얼마든지 수정할 수 있다.


오늘 배운 것

1. 탭메뉴 -> 기능사에서 필요 / 활용성
2. syntax -> 문자열을 처리하는 편리한 방법
3. 객체를 추적해서 값을 변경하는 것(제어,명령)

-----

강의내용에 책을 사용하지 않는 이유

기술적 부채(빚) // 초심자가 연습을 게을리 하는 것
완성도와 퀄리티는 보다는 작업하고 있는지가 중요하다고 함
점검 : 작업하고 있는가? 기본기를 등한시 하고 있는가?

1. 작업을 외면하고 있지는 않은지? -> 
1-1. 그렇다면 연습량(반복적인 연습)이 적진않은지.
1-2. 디자인적으로 여러가지를 보는 게 없는지


하고 실수하는 틀리는 것 -> 교정가능
안 하는 것 -> 교정 불가능


웹이 평면이 아니라는 관점 : css3 ->  css4 버전
계속 문서를 탈피하려고 하지 않을까

interactive web : 상호작용 웹
ajax : 홈페이지 전체를 받아와야 하는

연관 검색어가 나오는 검색 엔진의 알고리즘(ajax)

1. 사용자가 인풋필드에 문자열을 작성하면
2. 문자를 검사
3. 문자열과 검사한 데이터의 일치하는 문자열 빅데이터를 꺼내온다
4. 전체를 로딩하기에는 소모값이 너무 크니 부분만 로딩

깃허브 ->
하드디스크를 공용으로 쓰는 과정
1. 업로드 다운로드 : 개발자들이 주로쓰는 방식

2. 업로드(push)할 때는 커밋이라는 메모를 붙이게 되어있다.
3. 다른사람의 데이터도 다운로드(pull)을 할 수 있다.


노션(협업툴, 노트프로그램) : 슬랙 + 연결되어있다.
슬랙(개발자들의 카카오톡) : 단톡방 위주로 되어있는 메신저

javascript 기반 디자인 혹은 개발 -> 통합해서 작업할 수 있는 프레임워크 -> ios 안드로인드

react : 웹 spa : 로딩이 없는 소프트 웨어처럼 쓸 수 있는 웹사이트
vue.js
anguler.js
---------------------------------------
react Native : 모바일 애플리케이션

react : 사용자가 많다보니 커뮤니티가 활성화 돼있어서 정보찾기, 검색하기가 편함




<li class = "item-1">item=1</li>

li 엘레먼트 노드
class~ attribute 노드 새겨져 있는 것
item-1 텍스트컨텐츠

여러가지 식별할 수 있는 메서드를 둘 써볼것
getElementByTagName  --> 배열로 받아옴
식별자가 무엇인지보단 리턴값이 무엇인지가 중요함

typeof() 메서드,
값유형을 통해 존재를 확인할 수 있다.
사용법 1. 이게 값이 없을 때 조건
사용법 2. 이게 값이 있을 때 조건
undefined : 에러가 아니라 값이다(정해지지 않은)

배열 -> 중요
부모 엘리먼트에서 자식을 선택하는 경우(자식이 많을 경우에는)
일일이 선언하지 않고 .칠드런 메서드를 이용해 배열의 특성을 이용해 선택할 수 있다



쿼리셀렉터 : 식별할 목표를 만나는 순간 리턴됨 : 함수종료

배열로 받고싶을 떄 
쿼리셀렉터(부모).칠드런[인덱스]
쿼리셀렉터올[인덱스] -> 배열로 리턴 받음

공통점과 차이점 점검



배열 + 사칙연산

items[index + 1]

내가 접근하고 싶은 요소에 숫자를 이용해 접근할 수 있어짐

식별자의 각기 다른 방식들과 자식노드 접근 -> 배열과 시너지



1. 세로형 네비 폼을 만들어 본 것
2.. 복합적인 문서 구성(한 번에 이해하기는 쉽지 않음)
3. 셀렉터 기능 점검
-> 셀렉터 각자의 "리턴 방식"을 이해하면 사용처가 늘어남

제이쿼리 특징
1. 짧다
2. 복잡한 무언가 ajax

----------------
파악하기 어려움. js문법이랑 미묘하게 같은듯 다름

